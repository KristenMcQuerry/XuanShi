y.samps.keep <- y.samps[2001:n.samps]
plot(y.samps.keep,type='l', ylab = "Y Samples",
main = "Metropolis-Hastings Algorithm")
hist(y.samps.keep,freq=FALSE,
main = "Samples excluding burn-in draws")
curve(f.mc(x), from = -5, to = 8,
add = TRUE, col = 2)
f.mc <- function(y){
a <- ((y-3)^2)/(-18)
result <- exp(a)
return(result)
}
curve(f.mc(x), from = -10, to = 15,
ylab = "f(x)", main = "pdf of f(x)")
y.init = 22
n.samps <- 10000
y.samps <- rep(NA,n.samps)
reject = 0
# starting point for MC
y.samps[1] <- runif(1, min = y.init-6, max = y.init+6 )
for(i in 2:n.samps)
{
proposed <- runif(1, min = y.samps[i-1]-6, max = y.samps[i-1]+6)
numerator <- f.mc(proposed)*dunif(y.samps[i-1], min = proposed-6, max = proposed+6 )
denominator <- f.mc(y.samps[i-1])*dunif(proposed, min = y.samps[i-1]-6, max = y.samps[i-1]+6)
accept.prb <- numerator / denominator
accept.prb <- min(1, accept.prb)
if (runif(1,0,1) <= accept.prb){
y.samps[i] <- proposed
} else {
y.samps[i] <- y.samps[i-1]
reject=reject+1
}
}
reject    # nearly 3700 rejections
plot(y.samps,type='l', ylab = "Y Samples",
main = "Metropolis-Hastings Algorithm")
hist(y.samps,freq=FALSE)
# discard the first 4000 samples
y.samps.keep <- y.samps[4001:n.samps]
plot(y.samps.keep,type='l', ylab = "Y Samples",
main = "Metropolis-Hastings Algorithm")
hist(y.samps.keep,freq=FALSE, breaks = 15,
main = "Samples excluding burn-in draws")
hist(y.samps.keep,freq=FALSE, breaks = 15,
main = "Samples excluding burn-in draws")
hist(y.samps.keep,freq=FALSE, breaks = 20,
main = "Samples excluding burn-in draws")
curve(f.mc(x), from = -10, to = 15,
add = TRUE, col = 2)
#----------------- part c #######
# Monte Carlo Estimates
mean(y.samps.keep)
sd(y.samps.keep)
f.mc <- function(y){
a <- 1+ (4/5)*((y-3)^2)
result <- a^(-3)
return(result)
}
y.init = 22
n.samps <- 10000
y.samps <- rep(NA,n.samps)
tau <- 0.5
reject = 0
# starting point for MC
y.samps[1]<-rnorm(1,mean=y.init,sd=tau)
for(i in 2:n.samps)
{
proposed <- rnorm(1,mean = y.samps[i-1],sd = tau)
numerator <- f.mc(proposed)*dnorm(y.samps[i-1],mean=proposed,sd=tau)
denominator <- f.mc(y.samps[i-1])*dnorm(proposed,mean=y.samps[i-1],sd=tau)
accept.prb <- numerator / denominator
accept.prb <- min(1, accept.prb)
if (runif(1,0,1) <= accept.prb){
y.samps[i] <- proposed
} else {
y.samps[i] <- y.samps[i-1]
reject=reject+1
}
}
plot(y.samps,type='l', ylab = "Y Samples",
main = "Metropolis-Hastings Algorithm")
hist(y.samps,freq=FALSE)
curve(f.mc(x), from = -5, to = 30, add = TRUE, col = 2)
# discard the first 2000 samples
y.samps.keep <- y.samps[2001:n.samps]
plot(y.samps.keep,type='l', ylab = "Y Samples",
main = "Metropolis-Hastings Algorithm")
hist(y.samps.keep,freq=FALSE,
main = "Samples excluding burn-in draws")
curve(f.mc(x), from = -5, to = 8,
add = TRUE, col = 2)
a <- c(2, -1, 5, -8,1,20, 15,-4,9,-12)
sd(a)
a <- c(.9, .2, .5, -.1, .9,1.1, .4, .2, .5, .2, .5, .6)
mean(a)
sd(a)
41.9-0.0365*466.0
alpha <- 0.05
plot(10:20, func1(10:20), lty = )
alpha <- 0.05
func1 <- function(x){x+sqrt(x)*qnorm(1-alpha, 0,1)}
func2 <- function(x){qgamma(1-alpha, shape = x, rate = 1)}
plot(10:20, func1(10:20))
plot(10:20, func2(10:20))
plot(10:20, func2(10:20), type = "dashed")
plot(10:20, func2(10:20), lty = "dashed")
plot(10:20, func2(10:20), lty = "dashed")
plot(10:20, func2(10:20), lty = 2)
plot(10:20, func2(10:20), lty = 2, ylim = c(13, 30))
?lines
lines(10:20, func1(10:20), col = 2, add = T)
plot(10:20, func2(10:20), lty = 2, ylim = c(13, 30))
points(10:20, func1(10:20), col = 2, add = T)
line(10:20, func2(10:20))
lines(10:20, func2(10:20))
qnorm(1-alpha, 0,1)
lines(10:20, func1(10:20), col = 2)
plot(10:200, func2(10:200), lty = 2)
points(10:200, func1(10:200), col = 2, add = T)
lines(10:200, func2(10:200))
lines(10:200, func1(10:200), col = 2)
func3 <- function(x) x + sqrt(x)
plot(10:20, func2(10:20), lty = 2)
points(10:20, func1(10:20), col = 2)
lines(10:20, func2(10:20))
lines(10:20, func1(10:20), col = 2)
func3 <- function(x) x + sqrt(x)
lines(10:20, func3(10:20), col = 3)
lines(1:100, func3(1:100), col = 3)
plot(1:100, func3(1:100), col = 3)
plot(1:10, func3(1:10), col = 3)
func3 <- function(x) sqrt(x)
plot(1:10, func3(1:10), col = 3)
alpha <- 0.05
func1 <- function(x){x+sqrt(x)*qnorm(1-alpha, 0,1)}
func2 <- function(x){qgamma(1-alpha, shape = x, rate = 1)}
plot(10:20, func2(10:20), lty = 2)
points(10:20, func1(10:20), col = 2)
lines(10:20, func2(10:20))
lines(10:20, func1(10:20), col = 2)
?dpois
dpois(c(0,1,2,3), lambda = 4)
0:8
a <- dpois(0:8, lambda = 4)
sum(a)
dpois(0, lambda = 4)
exp(-4)
a <- dpois(0:5, lambda = 4)
sum(a)
a <- dpois(0:7, lambda = 4)
sum(a)
a <- dpois(0:6, lambda = 4)
sum(a)
a <- dpois(0:7, lambda = 4)
sum(a)
exp(-1)
4*(1-exp(-1))
dpois(2, lambda = x)
x <- 4*(1-exp(-1))
dpois(2, lambda = x)
sqrt(0.1886*(1-0.1886)/2418)
sqrt(0.2406*(1-0.2406)/66.5)
14+58+4
exp(0.2848)
exp(0.6750)
exp(-1.762)
exp(-1.606)
exp(-0.985)
exp(0.015)-1
1/0.172
?lsmeans
library(lsmeans)
?lsmeans
lsmeans(out.tomato,"temperature", adjust = "Bonferroni")
produce <- c(24.65, 29.17, 28.90,
24.38, 21.25, 25.53,
5.90, 18.27, 8.42,
1.34, 2.24, 1.83)
temperature <- as.factor(sort(rep(c(25,30,35,40),3)))
run <- as.factor(c(1,3,5,  2,3,6,  4,5,6,  1,2,4))
data.tomato <- data.frame(produce = produce, temperature = temperature, run = run)
model.tomato <- aov(produce~run+temperature, data = data.tomato)
summary(model.tomato)   # ANOVA table
# ols estimator and s.e.
mu.hat <- mean(data.tomato[,1])   # mu hat
y.dotj <- c(by(data.tomato[,1],data.tomato[,3],sum)) # y dot j
y.idot <- c(by(data.tomato[,1],data.tomato[,2],sum)) # y i dot
B1 <- y.dotj[1] + y.dotj[3] + y.dotj[5]
B2 <- y.dotj[2] + y.dotj[3] + y.dotj[6]
B3 <- y.dotj[4] + y.dotj[5] + y.dotj[6]
B4 <- y.dotj[1] + y.dotj[2] + y.dotj[4]
Q1 <- y.idot[1] - (B1/2)
Q2 <- y.idot[2] - (B2/2)
Q3 <- y.idot[3] - (B3/2)
Q4 <- y.idot[4] - (B4/2)
sum(Q1^2+Q2^2+Q3^2+Q4^2)/2   # SStreat(adjusted)
t1 <- Q1/2    # tau hat
t2 <- Q2/2
t3 <- Q3/2
t4 <- Q4/2
mu.hat + c(t1,t2,t3,t4)    # LS estimators for temperature means
# can also use
out.tomato <- ref.grid(model.tomato)
summary(out.tomato)
lsmeans(out.tomato,"temperature", adjust = "Bonferroni")
lsmeans(out.tomato,"temperature")
exp(-0.25803)
exp((1316.931-1224.243)/(-1151))
1-exp((1316.931-1224.243)/(-1151))
(1316.931-1224.243)
a <- 1-exp((1316.931-1224.243)/(-1151))
1-exp((1316.931-1214.243)/(-1151))
1-exp((1217.588-1316.931)/2)
1-exp((1217.588-1316.931)/1151)
R.theta1 <- c(16,0,15,10,9,7,6,1)
R.theta2 <- c(0,32,8,16,24,8,16,24)
plot(R.theta1,R.theta2, cex =1.5, pch = 1)
2/(3^(-0.25))
2/(sqrt(sqrt(3)))
2*(3^(-0.25))
(-1)*log(0.8)
((-1)*log(0.8))/12
3256/4
814*3
548/4
137*3
596/4
149*3
n.1 <- 4020
n.2 <- 4080
p1 <- 1327/4020
p2 <- 1795/4080
qnorm(0.975)
v.d <- ((p1*(1-p1))/n.1) + ((p2*(1-p2))/n.2)
v.d <- ((p1*(1-p1))/n.1) + ((p2*(1-p2))/n.2)
a <- 1.96*sqrt(v.d)+(((1/n.1)+(1/n.2))/2)
(p1-p2) + c(-1,1)*a
(p1-p2)
sqrt(v.d)
((1/n.1)+(1/n.2))
data.bird <- read.table("E:/UKY/661/data/T5-12.dat", header = F)
colnames(data.bird) <- c("tail", "wing")
## 95% confidence ellipse
library(car)
dataEllipse(data.bird$tail,data.bird$wing,levels = 0.95,
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
points(190,275, pch = 16, cex = 1, col = 4)
#---------------- part b
# T^2 intervals
n <- 45
p <- 2
alpha <- 0.05
x.bar <- colMeans(data.bird)
s.11 <- cov(data.bird)[1,1]
s.22 <- cov(data.bird)[2,2]
# cutoff value for T^2 CI
part1 <- ((n-1)*p*qf(1-alpha,df1 = p,df2 = n-p))/(n-p)
c.t <- sqrt(part1)
# cutoff value for bonferroni CI
c.b <- qt(1-alpha/(2*p),df = n-1)
# T^2 intervals for tail
x.bar[1] + c(-1,1)*c.t*sqrt(s.11/n)
# T^2 intervals for wing
x.bar[2] + c(-1,1)*c.t*sqrt(s.22/n)
# bonferroni intervals for tail
x.bar[1] + c(-1,1)*c.b*sqrt(s.11/n)
# bonferroni intervals for wing
x.bar[2] + c(-1,1)*c.b*sqrt(s.22/n)
?mahalanobis
data.bird
D <- mahalanobis(data.bird, center = colMeans(data.bird), cov = cov(data.bird))
round(D, digits = 2)  # D.i
library(MVN)
?hzTest
hzTest(data.bird, cov = FALSE, qqplot = TRUE)
hzTest(data.bird, cov = T, qqplot = TRUE)
hzTest(data.bird, cov = F, qqplot = TRUE)
j <- 1:45
j
n
qchisq((j-0.5)/n, df = 2)
qqline(D,q.cp)
q.cp <- qchisq((j-0.5)/n, df = 2)
qqplot(D,q.cp)
dataEllipse(data.bird$tail,data.bird$wing,levels = 0.5,
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
par(mfrow = c(1,2))
hzTest(data.bird, cov = F, qqplot = TRUE)  # Chisquare QQ plot
dataEllipse(data.bird$tail,data.bird$wing,levels = 0.5,
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
par(mfrow = c(1,1))
par(mfrow = c(1,2))
D <- mahalanobis(data.bird, center = colMeans(data.bird), cov = cov(data.bird))
library(MVN)
hzTest(data.bird, cov = F, qqplot = TRUE)  # Chisquare QQ plot
plot(data.bird$tail,data.bird$wing,
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
hzTest(data.bird, cov = F, qqplot = TRUE)  # Chisquare QQ plot
plot(data.bird$tail,data.bird$wing, main = "scatter diagram",
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
# T^2 intervals for tail
x.bar[1] + c(-1,1)*c.t*sqrt(s.11/n)
# T^2 intervals for wing
x.bar[2] + c(-1,1)*c.t*sqrt(s.22/n)
# bonferroni intervals for tail
x.bar[1] + c(-1,1)*c.b*sqrt(s.11/n)
# bonferroni intervals for wing
x.bar[2] + c(-1,1)*c.b*sqrt(s.22/n)
data.bird <- read.table("E:/UKY/661/data/T5-12.dat", header = F)
colnames(data.bird) <- c("tail", "wing")
## 95% confidence ellipse
library(car)
dataEllipse(data.bird$tail,data.bird$wing,levels = 0.95,
xlab = "Tail length", ylab = "Wing length",
xlim = c(160,220), ylim = c(240,320))
points(190,275, pch = 16, cex = 1, col = 4)
#---------------- part b
# T^2 intervals
n <- 45
p <- 2
alpha <- 0.05
x.bar <- colMeans(data.bird)
s.11 <- cov(data.bird)[1,1]
s.22 <- cov(data.bird)[2,2]
# cutoff value for T^2 CI
part1 <- ((n-1)*p*qf(1-alpha,df1 = p,df2 = n-p))/(n-p)
c.t <- sqrt(part1)
# cutoff value for bonferroni CI
c.b <- qt(1-alpha/(2*p),df = n-1)
# T^2 intervals for tail
x.bar[1] + c(-1,1)*c.t*sqrt(s.11/n)
# T^2 intervals for wing
x.bar[2] + c(-1,1)*c.t*sqrt(s.22/n)
# bonferroni intervals for tail
x.bar[1] + c(-1,1)*c.b*sqrt(s.11/n)
# bonferroni intervals for wing
x.bar[2] + c(-1,1)*c.b*sqrt(s.22/n)
setwd("~/GitHub/STA-693-CPH608-Assignment1")
setwd("~/GitHub/XuanShi")
install.packages("tidyverse")
install.packages("nycflights13")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(nycflights13)
flights
summary(flights)
?flight
flights[1,]
flights[1,1:5]
flights[1,1:8]
flights[1,4:10]
flights %>%
filter(arr_delay >= 120)
flights %>%
filter(arr_delay >= 120)
flights %>%
filter(dest == "IAH" || dest == "HOU")
a <- flights %>%
filter(dest == "IAH" || dest == "HOU")
summary(a)
levels(a$dest)
a$dest
a <- flights %>%
filter(dest == "IAH" || dest == "HOU")
levels(a$dest)
a$dest
a <- flights %>%
filter(dest == "IAH" , dest == "HOU")
levels(a$dest)
a$dest
a <- flights %>%
filter(dest == "IAH" || "HOU")
a$dest
a <- flights %>%
filter(dest %in% c("IAH", "HOU"))
a$dest
levels(a$dest)
unique(a$dest)
to_houston <- flights %>%
filter(dest %in% c("IAH", "HOU"))
unique(to_houston$dest)
to_houston <- flights %>%
filter(dest %in% c("IAH", "HOU"))
unique(to_houston$dest)   # check if this only contains flights to Houston(IAH or HOU)
three <- flights %>%
filter(dest %in% cc("UA", "AA", "DL"))
three <- flights %>%
filter(dest %in% c("UA", "AA", "DL"))
unique(three)   # check if this only contains flights to Houston(IAH or HOU)
three <- flights %>%
filter(carrier %in% c("UA", "AA", "DL"))
unique(three$carrier)   # check if this only contains flights to Houston(IAH or HOU)
summary(flights)
flight_summer <- flights %>%
filter(month %in% c(7,8,9))
unique(flight_summer)   # check if this only contains flights to Houston(IAH or HOU)
unique(flight_summer$month)   # check if this only contains flights to Houston(IAH or HOU)
flight$month
flights$month
levels(class(flights$month))
levels(flights$month)
unique(flights$month)
flight_summer <- flights %>%
filter(month %in% c(7,8,9))
unique(flight_summer$month)   # check if this only contains flights in summer
names(flights)
flights %>%
filter(dep_delay <= 0)
flights %>%
filter(dep_delay <= 0) %>%
filter(arr_delay >= 120)
flights %>%
filter(dep_delay <= 0) %>%
filter(arr_delay >= 120)
flights %>%
filter(dep_delay >= 60)
summary(flights)
flights %>%
filter(dep_time >= 0) %>%
filter(dep_time <= 600)
flights %>%
filter(dep_time >= 0 & dep_time <= 600)
flights %>%
filter(dep_time >= 0 & dep_time <= 600) %>%
arrange(desc(dep_time))
flights %>%
arrange(desc(dep_delay))
flights %>%
arrange(dep_delay)
flights %>%
arrange(dep_time)
flights %>%
mutate(speed = distance/air_time) %>%
arrange(desc(speed))
flight_fast <- flights %>%
mutate(speed = distance/air_time) %>%
arrange(desc(speed))
flight_fast$speed
flights %>%
arrange(desc(distance))
flight_fast[1,]       # fastest flights
flights %>%
arrange(desc(distance))
flight_far <- flights %>%
arrange(desc(distance))
flight_far$distance
flight_close <- flights %>%
arrange(distance)
flight_close$distance     # 4983 miles is the shortest distance
flights %>%
filter(arr_delay >= 120)
to_houston <- flights %>%
filter(dest %in% c("IAH", "HOU"))
unique(to_houston$dest)   # check if this only contains flights to Houston(IAH or HOU)
three <- flights %>%
filter(carrier %in% c("UA", "AA", "DL"))
unique(three$carrier)   # check if this only contains flights by these three airlines
flight_summer <- flights %>%
filter(month %in% c(7,8,9))
unique(flight_summer$month)   # check if this only contains flights in summer
flights %>%
filter(dep_delay <= 0) %>%
filter(arr_delay >= 120)
flights  %>%
filter(arr_delay >= 120) %>%
filter(dep_delay <= 0)
summary(flights)
flights[1,]
flights %>%
filter(dep_delay >= 60) %>%
mutate(madeup <- arr_delay - dep_delay) %>%
filter(madeup <= -30)
flights %>%
filter(dep_delay >= 60) %>%
mutate(madeup <- arr_delay - dep_delay) %>%
filter(madeup <= -30)
flights %>%
filter(dep_delay >= 60) %>%
mutate(madeup = arr_delay - dep_delay) %>%
filter(madeup <= -30)
flights %>%
filter(dep_delay >= 60) %>%
mutate(madeup = dep_delay - arr_delay) %>%
filter(madeup >= 30)
flights %>%
filter(dep_time >= 0 & dep_time <= 600)
flights %>%
arrange(desc(dep_delay))
flights %>%
arrange(dep_time)
flights %>%
arrange(desc(dep_delay))    # longest delay is 1301 minutes
flights %>%
arrange(dep_time)          # earliest time to leave is 1 am
flight_fast <- flights %>%
mutate(speed = distance/air_time) %>%
arrange(desc(speed))
flight_fast[1,]       # fastest flights
flight_far <- flights %>%
arrange(desc(distance))
flight_far$distance     # 4983 miles is the longest distance
flight_close <- flights %>%
arrange(distance)
flight_close$distance     # 17 miles is the shortest distance
